openapi: 3.0.3
info:
  version: 1.0.0
  title: Library
  description: Library Microservice API
  contact:
    name: Evgenii Mikhailov
    url: https://mikhailov.net
    email: evgenii@mikhailov.net
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - description: main
    url: https://library.mikhailov.net/api/v1/
  - description: localhost
    url: http://localhost:8080/api/v1
paths:
  /books:
    get:
      operationId: getAllBooks
      summary: Получить список книг
      tags:
        - Книги
      responses:
        '200':
          description: Список книг
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookListResponse'
    post:
      operationId: postBook
      summary: Добавить книгу
      tags:
        - Книги
      requestBody:
        description: Данные создания Книги
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookDTOPost"
      responses:
        '200':
          description: Книга добавлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdDTO'
        '409':
          description: Книга с таким ISBN уже существует
  /books/init:
    post:
      operationId: initBooks
      summary: Ициниализировать БД из публичных источников, передается список ISBN
      tags:
        - Книги
      requestBody:
        description: Список ISBN
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ISBNList"
      responses:
        '200':
          description: Запрос на инициализацию успешно обработан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ISBNResultList'
        '500':
          description: Произошла непредвиденная ошибка
  /books/{bookId}:
    parameters:
      - $ref: '#/components/parameters/bookId'
    delete:
      operationId: deleteBook
      summary: Удалить книгу
      tags:
        - Книги
      responses:
        '200':
          description: Книга удалена
        '404':
          description: Книга не найдена
  /authors:
    get:
      operationId: getAllAuthors
      summary: Получить список авторов
      tags:
        - Авторы
      responses:
        '200':
          description: Список авторов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorListResponse'
    post:
      operationId: postAuthor
      summary: Добавить автора
      tags:
        - Авторы
      requestBody:
        description: Данные создания Автора
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorDTO"
      responses:
        '200':
          description: Автор добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDTO'
        '409':
          description: Автор уже существует
  /authors/{authorId}:
    parameters:
      - $ref: '#/components/parameters/authorId'
    put:
      operationId: putAuthor
      summary: Изменить автора
      requestBody:
        description: Данные для обновления автора
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorDTO"
      tags:
        - Авторы
      responses:
        '200':
          description: Обновленный автор
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorDTO"
    delete:
      operationId: deleteAuthor
      summary: Удалить автора
      tags:
        - Авторы
      responses:
        '200':
          description: Автор удален
        '404':
          description: Автор не найден
components:
  parameters:
    authorId:
      name: authorId
      in: path
      description: Идентификатор
      required: true
      schema:
        type: integer
        format: int64
    bookId:
      name: bookId
      in: path
      description: Идентификатор
      required: true
      schema:
        type: integer
        format: int64
  schemas:
    IdDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
    AuthorListResponse:
      type: array
      items:
        $ref: '#/components/schemas/AuthorDTO'
    AuthorDTO:
      type: object
      required:
        - name
        - surname
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        name:
          type: string
          example: Joshua
        surname:
          type: string
          example: Bloch
    BookListResponse:
      type: array
      items:
        $ref: '#/components/schemas/BookDTOFull'
    BookDTOWithoutAutors:
      type: object
      required:
        - title
        - isbn
        - authors
      properties:
        id:
          readOnly: true
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: Spring boot in action
        isbn:
          type: number
          minLength: 10
          maxLength: 13
          example: 1617292540
        description:
          type: string
          example: lorem ipsum
        imageurl:
          type: string
          format: regex
          pattern: https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)
          example: http://ya.ru/jpg.jpg
    BookDTOFull:
      allOf:
        - $ref: '#/components/schemas/BookDTOWithoutAutors'
      type: object
      properties:
        authors:
          type: array
          items:
            $ref: '#/components/schemas/AuthorDTO'
    BookDTOPost:
      allOf:
        - $ref: '#/components/schemas/BookDTOWithoutAutors'
      type: object
      properties:
        authors:
          type: array
          items:
            $ref: '#/components/schemas/IdDTO'
    ISBNList:
      type: array
      items:
        type: string
        example: 9781484256251, 9781484256252
    ISBNResultList:
      type: object
      properties:
        success:
          type: array
          description: Список успешно добавленных isbn
          items:
            type: string
            example: 9781484256251
        failed:
          type: array
          description: Список isbn, которые найти не удалось
          items:
            type: string
            example: 9781484256252

